

Microchip MPLAB XC8 Assembler V2.46 build 20240104201356 
                                                                                               Tue Aug 06 10:02:43 2024

Microchip MPLAB XC8 C Compiler v2.46 (Free license) build 20240104201356 Og1 
     1                           	processor	18F4580
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     6                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     7                           	psect	text0,global,reloc=2,class=CODE,delta=1
     8                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     9                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    10                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    11  0000                     
    12                           ; Generated 17/10/2023 GMT
    13                           ; 
    14                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    15                           ; All rights reserved.
    16                           ; 
    17                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    18                           ; 
    19                           ; Redistribution and use in source and binary forms, with or without modification, are
    20                           ; permitted provided that the following conditions are met:
    21                           ; 
    22                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    23                           ;        conditions and the following disclaimer.
    24                           ; 
    25                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    26                           ;        of conditions and the following disclaimer in the documentation and/or other
    27                           ;        materials provided with the distribution. Publication is not required when
    28                           ;        this file is used in an embedded application.
    29                           ; 
    30                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    31                           ;        software without specific prior written permission.
    32                           ; 
    33                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    34                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    35                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    36                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    37                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    38                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    39                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    40                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    41                           ; 
    42                           ; 
    43                           ; Code-generator required, PIC18F4580 Definitions
    44                           ; 
    45                           ; SFR Addresses
    46  0000                     _RC5	set	31765
    47  0000                     _RC4	set	31764
    48  0000                     _RC1	set	31761
    49  0000                     _RC3	set	31763
    50  0000                     _RC2	set	31762
    51  0000                     _TRISB	set	3987
    52  0000                     _TRISC	set	3988
    53  0000                     _RC0	set	31760
    54  0000                     _TRISD	set	3989
    55                           
    56                           ; #config settings
    57                           
    58                           	psect	cinit
    59  0000'                    __pcinit:
    60                           	callstack 0
    61  0000'                    start_initialization:
    62                           	callstack 0
    63  0000'                    __initialization:
    64                           	callstack 0
    65  0000'                    end_of_initialization:
    66                           	callstack 0
    67  0000'                    __end_of__initialization:
    68                           	callstack 0
    69  0000' 0100               	movlb	0
    70  0002' EF00' F000'        	goto	_main	;jump to C main() function
    71                           
    72                           	psect	cstackCOMRAM
    73  0000'                    __pcstackCOMRAM:
    74                           	callstack 0
    75  0000'                    main@c1:
    76                           	callstack 0
    77                           
    78                           ; 2 bytes @ 0x0
    79  0000'                    	ds	2
    80  0002'                    main@c2:
    81                           	callstack 0
    82                           
    83                           ; 2 bytes @ 0x2
    84  0002'                    	ds	2
    85                           
    86 ;;
    87 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
    88 ;;
    89 ;; *************** function _main *****************
    90 ;; Defined at:
    91 ;;		line 13 in file "lcdmotor1.c"
    92 ;; Parameters:    Size  Location     Type
    93 ;;		None
    94 ;; Auto vars:     Size  Location     Type
    95 ;;  c2              2    2[COMRAM] int 
    96 ;;  c1              2    0[COMRAM] int 
    97 ;; Return value:  Size  Location     Type
    98 ;;                  1    wreg      void 
    99 ;; Registers used:
   100 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, bsr, status,2, status,0, pcl, pclath, pclatu, btemp, b
      +temp+1, btemp+2, btemp+3, btemp+4, btemp+5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, btemp+12, btemp+13, 
      +btemp+14, btemp+15, btemp+16, btemp+17, btemp+18, btemp+19, btemp+20, btemp+21, btemp+22, btemp+23, btemp+24, btemp+25, 
      +btemp+26, btemp+27, btemp+28, btemp+29, btemp+30, btemp+31, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, cs
      +tack
   101 ;; Tracked objects:
   102 ;;		On entry : 0/0
   103 ;;		On exit  : 0/0
   104 ;;		Unchanged: 0/0
   105 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   106 ;;      Params:         0       0       0       0       0       0       0
   107 ;;      Locals:         4       0       0       0       0       0       0
   108 ;;      Temps:          0       0       0       0       0       0       0
   109 ;;      Totals:         4       0       0       0       0       0       0
   110 ;;Total ram usage:        4 bytes
   111 ;; Hardware stack levels required when called: 1
   112 ;; This function calls:
   113 ;;		_cmd
   114 ;; This function is called by:
   115 ;;		Startup code after reset
   116 ;; This function uses a non-reentrant model
   117 ;;
   118                           
   119                           	psect	text0
   120  0000'                    __ptext0:
   121                           	callstack 0
   122  0000'                    _main:
   123                           	callstack 30
   124  0000'                    
   125                           ;lcdmotor1.c: 15:       TRISC=0X03;
   126  0000' 0E03               	movlw	3
   127  0002' 6E94               	movwf	148,c	;volatile
   128                           
   129                           ;lcdmotor1.c: 16:       TRISD=0X00;
   130  0004' 0E00               	movlw	0
   131  0006' 6E95               	movwf	149,c	;volatile
   132                           
   133                           ;lcdmotor1.c: 17:       TRISB=0X00;
   134  0008' 0E00               	movlw	0
   135  000A' 6E93               	movwf	147,c	;volatile
   136  000C'                    
   137                           ;lcdmotor1.c: 19:        cmd(0x01);
   138  000C' 0E01               	movlw	1
   139  000E' EC00' F000'        	call	_cmd
   140  0012'                    
   141                           ;lcdmotor1.c: 20:     cmd(0x0f);
   142  0012' 0E0F               	movlw	15
   143  0014' EC00' F000'        	call	_cmd
   144  0018'                    
   145                           ;lcdmotor1.c: 21:     cmd(0x38);
   146  0018' 0E38               	movlw	56
   147  001A' EC00' F000'        	call	_cmd
   148  001E'                    
   149                           ;lcdmotor1.c: 23:       int c1=-1,c2=-1;
   150  001E' 6800'              	setf	main@c1^0,c
   151  0020' 6800'              	setf	(main@c1+1)^0,c
   152  0022' 6800'              	setf	main@c2^0,c
   153  0024' 6800'              	setf	(main@c2+1)^0,c
   154  0026'                    l736:
   155                           
   156                           ;lcdmotor1.c: 25:     {;lcdmotor1.c: 26:         if(RC0==1)
   157  0026' A082               	btfss	3970,0,c	;volatile
   158  0028' EF00' F000'        	goto	u11
   159  002C' EF00' F000'        	goto	u10
   160  0030'                    u11:
   161  0030' EF00' F000'        	goto	l26
   162  0034'                    u10:
   163  0034'                    
   164                           ;lcdmotor1.c: 27:         {;lcdmotor1.c: 28:             if(c1==2)
   165  0034' 0E02               	movlw	2
   166  0036' 1800'              	xorwf	main@c1^0,w,c
   167  0038' 1000'              	iorwf	(main@c1+1)^0,w,c
   168  003A' A4D8               	btfss	status,2,c
   169  003C' EF00' F000'        	goto	u21
   170  0040' EF00' F000'        	goto	u20
   171  0044'                    u21:
   172  0044' EF00' F000'        	goto	l742
   173  0048'                    u20:
   174  0048'                    
   175                           ;lcdmotor1.c: 29:             {;lcdmotor1.c: 30:                 c1=-1;
   176  0048' 6800'              	setf	main@c1^0,c
   177  004A' 6800'              	setf	(main@c1+1)^0,c
   178  004C'                    l742:
   179                           
   180                           ;lcdmotor1.c: 32:             c1++;
   181  004C' 4A00'              	infsnz	main@c1^0,f,c
   182  004E' 2A00'              	incf	(main@c1+1)^0,f,c
   183  0050'                    l28:
   184  0050' B082               	btfsc	3970,0,c	;volatile
   185  0052' EF00' F000'        	goto	u31
   186  0056' EF00' F000'        	goto	u30
   187  005A'                    u31:
   188  005A' EF00' F000'        	goto	l28
   189  005E'                    u30:
   190  005E'                    
   191                           ;lcdmotor1.c: 34:             cmd(0x01);
   192  005E' 0E01               	movlw	1
   193  0060' EC00' F000'        	call	_cmd
   194                           
   195                           ;lcdmotor1.c: 35:             cmd(0x38);
   196  0064' 0E38               	movlw	56
   197  0066' EC00' F000'        	call	_cmd
   198  006A'                    
   199                           ;lcdmotor1.c: 37:          if(c1==0)
   200  006A' 5000'              	movf	main@c1^0,w,c
   201  006C' 1000'              	iorwf	(main@c1+1)^0,w,c
   202  006E' A4D8               	btfss	status,2,c
   203  0070' EF00' F000'        	goto	u41
   204  0074' EF00' F000'        	goto	u40
   205  0078'                    u41:
   206  0078' EF00' F000'        	goto	l750
   207  007C'                    u40:
   208  007C'                    
   209                           ;lcdmotor1.c: 38:             {;lcdmotor1.c: 39:             RC2=1; RC3=0;
   210  007C' 8482               	bsf	3970,2,c	;volatile
   211  007E' 9682               	bcf	3970,3,c	;volatile
   212                           
   213                           ;lcdmotor1.c: 41:             }
   214  0080' EF00' F000'        	goto	l26
   215  0084'                    l750:
   216  0084' 0400'              	decf	main@c1^0,w,c
   217  0086' 1000'              	iorwf	(main@c1+1)^0,w,c
   218  0088' A4D8               	btfss	status,2,c
   219  008A' EF00' F000'        	goto	u51
   220  008E' EF00' F000'        	goto	u50
   221  0092'                    u51:
   222  0092' EF00' F000'        	goto	l754
   223  0096'                    u50:
   224  0096'                    
   225                           ;lcdmotor1.c: 43:             {;lcdmotor1.c: 44:             RC2=0; RC3=1;
   226  0096' 9482               	bcf	3970,2,c	;volatile
   227  0098' 8682               	bsf	3970,3,c	;volatile
   228                           
   229                           ;lcdmotor1.c: 46:             }
   230  009A' EF00' F000'        	goto	l26
   231  009E'                    l754:
   232  009E' 0E02               	movlw	2
   233  00A0' 1800'              	xorwf	main@c1^0,w,c
   234  00A2' 1000'              	iorwf	(main@c1+1)^0,w,c
   235  00A4' A4D8               	btfss	status,2,c
   236  00A6' EF00' F000'        	goto	u61
   237  00AA' EF00' F000'        	goto	u60
   238  00AE'                    u61:
   239  00AE' EF00' F000'        	goto	l26
   240  00B2'                    u60:
   241  00B2'                    
   242                           ;lcdmotor1.c: 48:             {;lcdmotor1.c: 49:                 RC2=0; RC3=0;
   243  00B2' 9482               	bcf	3970,2,c	;volatile
   244  00B4' 9682               	bcf	3970,3,c	;volatile
   245  00B6'                    l26:
   246                           
   247                           ;lcdmotor1.c: 51:         if(RC1==1)
   248  00B6' A282               	btfss	3970,1,c	;volatile
   249  00B8' EF00' F000'        	goto	u71
   250  00BC' EF00' F000'        	goto	u70
   251  00C0'                    u71:
   252  00C0' EF00' F000'        	goto	l736
   253  00C4'                    u70:
   254  00C4'                    
   255                           ;lcdmotor1.c: 52:         {;lcdmotor1.c: 53:             if(c2==2)
   256  00C4' 0E02               	movlw	2
   257  00C6' 1800'              	xorwf	main@c2^0,w,c
   258  00C8' 1000'              	iorwf	(main@c2+1)^0,w,c
   259  00CA' A4D8               	btfss	status,2,c
   260  00CC' EF00' F000'        	goto	u81
   261  00D0' EF00' F000'        	goto	u80
   262  00D4'                    u81:
   263  00D4' EF00' F000'        	goto	l762
   264  00D8'                    u80:
   265  00D8'                    
   266                           ;lcdmotor1.c: 54:             {;lcdmotor1.c: 55:                 c2=-1;
   267  00D8' 6800'              	setf	main@c2^0,c
   268  00DA' 6800'              	setf	(main@c2+1)^0,c
   269  00DC'                    l762:
   270                           
   271                           ;lcdmotor1.c: 57:             c2++;
   272  00DC' 4A00'              	infsnz	main@c2^0,f,c
   273  00DE' 2A00'              	incf	(main@c2+1)^0,f,c
   274  00E0'                    l38:
   275  00E0' B282               	btfsc	3970,1,c	;volatile
   276  00E2' EF00' F000'        	goto	u91
   277  00E6' EF00' F000'        	goto	u90
   278  00EA'                    u91:
   279  00EA' EF00' F000'        	goto	l38
   280  00EE'                    u90:
   281  00EE'                    
   282                           ;lcdmotor1.c: 60:          if(c2==0)
   283  00EE' 5000'              	movf	main@c2^0,w,c
   284  00F0' 1000'              	iorwf	(main@c2+1)^0,w,c
   285  00F2' A4D8               	btfss	status,2,c
   286  00F4' EF00' F000'        	goto	u101
   287  00F8' EF00' F000'        	goto	u100
   288  00FC'                    u101:
   289  00FC' EF00' F000'        	goto	l768
   290  0100'                    u100:
   291  0100'                    
   292                           ;lcdmotor1.c: 61:             {;lcdmotor1.c: 62:             RC4=1; RC5=0;
   293  0100' 8882               	bsf	3970,4,c	;volatile
   294  0102' 9A82               	bcf	3970,5,c	;volatile
   295                           
   296                           ;lcdmotor1.c: 64:             }
   297  0104' EF00' F000'        	goto	l736
   298  0108'                    l768:
   299  0108' 0400'              	decf	main@c2^0,w,c
   300  010A' 1000'              	iorwf	(main@c2+1)^0,w,c
   301  010C' A4D8               	btfss	status,2,c
   302  010E' EF00' F000'        	goto	u111
   303  0112' EF00' F000'        	goto	u110
   304  0116'                    u111:
   305  0116' EF00' F000'        	goto	l772
   306  011A'                    u110:
   307  011A'                    
   308                           ;lcdmotor1.c: 66:             {;lcdmotor1.c: 67:             RC4=0; RC5=1;
   309  011A' 9882               	bcf	3970,4,c	;volatile
   310  011C' 8A82               	bsf	3970,5,c	;volatile
   311                           
   312                           ;lcdmotor1.c: 69:             }
   313  011E' EF00' F000'        	goto	l736
   314  0122'                    l772:
   315  0122' 0E02               	movlw	2
   316  0124' 1800'              	xorwf	main@c2^0,w,c
   317  0126' 1000'              	iorwf	(main@c2+1)^0,w,c
   318  0128' A4D8               	btfss	status,2,c
   319  012A' EF00' F000'        	goto	u121
   320  012E' EF00' F000'        	goto	u120
   321  0132'                    u121:
   322  0132' EF00' F000'        	goto	l36
   323  0136'                    u120:
   324  0136'                    
   325                           ;lcdmotor1.c: 71:             {;lcdmotor1.c: 72:                 RC4=0; RC5=0;
   326  0136' 9882               	bcf	3970,4,c	;volatile
   327  0138' 9A82               	bcf	3970,5,c	;volatile
   328  013A' EF00' F000'        	goto	l736
   329  013E'                    l36:
   330  013E' EF00' F000'        	goto	l736
   331  0142' EF00' F000'        	goto	start
   332  0146'                    __end_of_main:
   333                           	callstack 0
   334                           
   335                           	psect	smallconst
   336  0000'                    __psmallconst:
   337                           	callstack 0
   338  0000' 00                 	db	0
   339  0001' 00                 	db	0	; dummy byte at the end
   340  0000                     
   341                           	psect	rparam
   342  0000                     tosu	equ	0xFFF
   343                           tosh	equ	0xFFE
   344                           tosl	equ	0xFFD
   345                           stkptr	equ	0xFFC
   346                           pclatu	equ	0xFFB
   347                           pclath	equ	0xFFA
   348                           pcl	equ	0xFF9
   349                           tblptru	equ	0xFF8
   350                           tblptrh	equ	0xFF7
   351                           tblptrl	equ	0xFF6
   352                           tablat	equ	0xFF5
   353                           prodh	equ	0xFF4
   354                           prodl	equ	0xFF3
   355                           indf0	equ	0xFEF
   356                           postinc0	equ	0xFEE
   357                           postdec0	equ	0xFED
   358                           preinc0	equ	0xFEC
   359                           plusw0	equ	0xFEB
   360                           fsr0h	equ	0xFEA
   361                           fsr0l	equ	0xFE9
   362                           wreg	equ	0xFE8
   363                           indf1	equ	0xFE7
   364                           postinc1	equ	0xFE6
   365                           postdec1	equ	0xFE5
   366                           preinc1	equ	0xFE4
   367                           plusw1	equ	0xFE3
   368                           fsr1h	equ	0xFE2
   369                           fsr1l	equ	0xFE1
   370                           bsr	equ	0xFE0
   371                           indf2	equ	0xFDF
   372                           postinc2	equ	0xFDE
   373                           postdec2	equ	0xFDD
   374                           preinc2	equ	0xFDC
   375                           plusw2	equ	0xFDB
   376                           fsr2h	equ	0xFDA
   377                           fsr2l	equ	0xFD9
   378                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95      4       4
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0     120
                                              0 COMRAM     4     4      0
                                _cmd
 ---------------------------------------------------------------------------------
 (1) _cmd                                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _cmd

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           5F      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              5F      4       4       1        4.2%
STACK                0      0       0       2        0.0%
DATA                 0      0       0       3        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBIGSFRh          6A      0       0      16        0.0%
BITBIGSFRlh         10      0       0      17        0.0%
BITBIGSFRll        282      0       0      18        0.0%
ABS                  0      0       0      19        0.0%
BIGRAM             5FF      0       0      20        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%


Microchip Technology PIC18 Macro Assembler V2.46 build 20240104201356 
Symbol Table                                                                                   Tue Aug 06 10:02:43 2024

                     l26 00B6                       l36 013E                       l28 0050  
                     l38 00E0                       u10 0034                       u11 0030  
                     u20 0048                       u21 0044                       u30 005E  
                     u31 005A                       u40 007C                       u41 0078  
                     u50 0096                       u51 0092                       u60 00B2  
                     u61 00AE                       u70 00C4                       u71 00C0  
                     u80 00D8                       u81 00D4                       u90 00EE  
                     u91 00EA                      l730 0018                      l740 0048  
                    l732 001E                      l724 0000                      l750 0084  
                    l742 004C                      l734 0022                      l726 000C  
                    l760 00D8                      l752 0096                      l744 005E  
                    l736 0026                      l728 0012                      l770 011A  
                    l762 00DC                      l754 009E                      l746 006A  
                    l738 0034                      l772 0122                      l764 00EE  
                    l756 00B2                      l748 007C                      l774 0136  
                    l766 0100                      l758 00C4                      l768 0108  
                    _RC0 7C10                      _RC1 7C11                      _RC2 7C12  
                    _RC3 7C13                      _RC4 7C14                      _RC5 7C15  
                    u100 0100                      u101 00FC                      u110 011A  
                    u111 0116                      u120 0136                      u121 0132  
                    _cmd 0000*                    ?_cmd 0000                     _main 0000  
                   start 0000*            ___param_bank 0000                    ??_cmd 0000  
                  ?_main 0000                    _TRISB 0F93                    _TRISC 0F94  
                  _TRISD 0F95                    status 0FD8          __initialization 0000  
           __end_of_main 0146                   ??_main 0000            __activetblptr 0000  
                 isa$std 0001                   main@c1 0000                   main@c2 0002  
           __mediumconst 0000*              __accesstop 0000* __end_of__initialization 0000  
          ___rparam_used 0001           __pcstackCOMRAM 0000                  __Hparam 0000  
                __Lparam 0000             __psmallconst 0000                  __pcinit 0000  
                __ramtop 0000*                 __ptext0 0000     end_of_initialization 0000  
    start_initialization 0000              __smallconst 0000*                __Hrparam 0000* 
               __Lrparam 0000*                isa$xinst 0000  
